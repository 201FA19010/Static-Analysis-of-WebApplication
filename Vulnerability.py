sql_injection_vul ="""
import sqlite3
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT,
    password TEXT
)
''')
cursor.execute("INSERT INTO users (username, password) VALUES ('admin', 'admin123')")
cursor.execute("INSERT INTO users (username, password) VALUES ('user', 'user123')")
conn.commit()
def get_user_by_username(username):
    query = f"SELECT * FROM users WHERE username = '{username}'"
    print(f"Executing query: {query}")
    cursor.execute(query)
    return cursor.fetchall()
def update_password(username, new_password):
    query = f"UPDATE users SET password = '{new_password}' WHERE username = '{username}'"
    print(f"Executing query: {query}")
    cursor.execute(query)
    conn.commit()
def delete_user(username):
    # Vulnerable to SQL Injection
    query = f"DELETE FROM users WHERE username = '{username}'"
    print(f"Executing query: {query}")
    cursor.execute(query)
    conn.commit()
if __name__ == "__main__":
    username_input = "admin' OR '1'='1"
    print("Retrieving user data with SQL injection:")
    users = get_user_by_username(username_input)
    for user in users:
        print(user)
    username_input = "admin"
    new_password_input = "newpassword' --"
    print("\nUpdating user password with SQL injection:")
    update_password(username_input, new_password_input)
    username_input = "admin' OR '1'='1"
    print("\nDeleting user with SQL injection:")
    delete_user(username_input)
    print("\nVerifying changes:")
    cursor.execute("SELECT * FROM users")
    for row in cursor.fetchall():
        print(row)
conn.close()"""
xss_script_vul = """
import os
def create_file_with_extension(file_name):
    if not is_safe_extension(file_name):
        print(f"Error: '{file_name}' has an unsafe extension.")
        return
    try:
        with open(file_name, 'w') as file:
            file.write("This is a test file.")
        print(f"File '{file_name}' created successfully.")
    except Exception as e:
        print(f"Error creating file '{file_name}': {e}")
def is_safe_extension(file_name):
    safe_extensions = ['.txt', '.log', '.csv']
    ext = os.path.splitext(file_name)[1].lower()
    return ext in safe_extensions
if __name__ == "__main__":
    dangerous_files = ["malicious.exe", "dangerous.bat", "harmful.scr", "risky.ps1", "safe_file.txt"]
    print("Creating files with extensions:")
    for file in dangerous_files:
        create_file_with_extension(file)
"""

path_traversal_basic = "../../etc/passwd"
path_traversal_windows = "..\\..\\Windows\\system32\\cmd.exe"
command_injection_basic = "os.system('ls -la; rm -rf /')"
command_injection_backticks = "os.system(`ls -la`)"
def detect_security_vulnerabilities(code):
    import re
    vulnerabilities = []
    
    #detect SQL Injection vulnerabilities
    sql_patterns = [
        r'\bselect\b.*\bfrom\b.*\bwhere\b',
        r'\binsert\b.*\binto\b',
        r'\bupdate\b.*\bset\b',
        r'\bdelete\b.*\bfrom\b',
        r'\bor\b.*\b1=1\b',
        r'\band\b.*\b1=1\b',
        r'\bunion\b.*\bselect\b',
        r'\bexec\b.*\b(?:s|x)p_cmdshell\b'
    ]
    for pattern in sql_patterns:
        if re.search(pattern, code, re.IGNORECASE):
            vulnerabilities.append(f'Possible SQL Injection: {pattern}')
    
    #detect dangerous file extensions
    disallowed_extensions = [".exe", ".bat", ".scr", ".ps1"]
    if any(code.lower().endswith(ext) for ext in disallowed_extensions):
        vulnerabilities.append("Potential File Extension Attack (Disallowed Extension)")
    
    #detect XSS vulnerabilities
    xss_patterns = [
        r'<\s*script\s*>',
        r'on\w+\s*=\s*".*?"',
        r'on\w+\s*=\s*\'.*?\'',
        r'on\w+\s*=\s*[^>\s]*',
        r'<\s*script\s*>',
        r'on\w+\s*=\s*".*?"',
        r'on\w+\s*=\s*\'.*?\'',
        r'on\w+\s*=\s*[^>\s]*',
        r'<\s*img\s*src\s*=\s*["\']javascript:',
        r'<\s*iframe\s*src\s*=\s*["\']javascript:',
        r'<\s*a\s*href\s*=\s*["\']javascript:',
        r'<\s*input\s*type\s*=\s*["\']button\s*["\']\s*onclick\s*=\s*["\']javascript:',
        r'<\s*form\s*action\s*=\s*["\']javascript:',
        r'<\s*meta\s*http-equiv\s*=\s*["\']refresh\s*["\']\s*content\s*=\s*["\']0;\s*url=javascript:',
        r'<\s*frame\s*src\s*=\s*["\']javascript:',
        r'on\w+\s*=\s*["\'](?:eval\(|new\s+Function\()',
        r'\bexpression\s*:\s*[^};]*',
        r'\burl\s*:\s*[^};]*',
        r'style\s*=\s*["\'][^"\']*expression\(',
        r'background[-image]*\s*:\s*[^};]*url\(',
        r'<\s*[^>]*\son[^=]+\s*=\s*["\'][^"\']*["\']'


    ]

    for pattern in xss_patterns:
        if re.search(pattern, code, re.IGNORECASE):
            vulnerabilities.append(f'Possible XSS Vulnerability: {pattern}')

    return vulnerabilities
    
    #detect Path Traversal vulnerabilities
    path_traversal_pattern = r'\.\./|\.\.\\'
    if re.search(path_traversal_pattern, code):
        vulnerabilities.append('Possible Path Traversal Vulnerability')
    
    #detect Command Injection vulnerabilities
    command_injection_pattern = r'[`|;&]'
    if re.search(command_injection_pattern, code):
        vulnerabilities.append('Possible Command Injection Vulnerability')
    
    return vulnerabilities

if __name__ == "__main__":
    test_codes = [
        sql_injection_vul,
        xss_script_vul
    ]

    for code in test_codes:
        vulnerabilities = detect_security_vulnerabilities(code)
        print(f"Code: {code}")
        if vulnerabilities:
            print("Potential vulnerabilities found:")
            for vulnerability in vulnerabilities:
                print(f" - {vulnerability}")
        else:
            print("No vulnerabilities found.")
        print("\n")
        if(len(vulnerabilities)>4):
          print("security scaling level: 1 out 5")
        elif(len(vulnerabilities)==3):
          print("security scaling level: 2 out 5")
        elif(len(vulnerabilities)==2):
          print("security scaling level: 3 out 5")
        elif(len(vulnerabilities)==1):
          print("security scaling level: 4 out 5")
        elif(len(vulnerabilities)==0):
          print("security scaling level: 5 out 5")
